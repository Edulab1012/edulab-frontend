'use client'

import { useEffect, useState } from "react"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Dialog, DialogTrigger, DialogContent, DialogTitle } from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

import GradeGroup from "@/app/school/(dashboard)/teacherlist/components/AddTeacher/GradeGroup"
import axios from "axios"
import { BASE_URL } from "@/constants/baseurl"
import { toast } from "sonner"
import ChooseSubject from "./Subject"

const days = ["–î–∞–≤–∞–∞", "–ú—è–≥–º–∞—Ä", "–õ—Ö–∞–≥–≤–∞", "–ü“Ø—Ä—ç–≤", "–ë–∞–∞—Å–∞–Ω"]
const timeSlots = Array.from({ length: 12 }, (_, i) => `${8 + i}:00`)

type ScheduleEntry = { day: string; time: string }

export default function AddClassForm() {
    const [token, setToken] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [errors, setErrors] = useState({ subject: "", grade: "" })
    const [form, setForm] = useState({
        subject: [] as string[],
        grade: "",
        schedule: [] as ScheduleEntry[],
        term: "",
    })

    // üîê –¢–æ–∫–µ–Ω—ã–≥ localStorage-–æ–æ—Å –∞–≤–∞—Ö
    useEffect(() => {
        if (typeof window !== "undefined") {
            const storedToken = localStorage.getItem("token");
            setToken(storedToken);
        }
    }, []);

    // ‚å®Ô∏è –ò–Ω–ø—É—Ç —Ç–∞–ª–±–∞—Ä—É—É–¥—ã–≥ ”©”©—Ä—á–ª”©—Ö
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setForm({ ...form, [e.target.name]: e.target.value })
        setErrors({ ...errors, [e.target.name]: "" })
    }

    // üìÖ ”®–¥”©—Ä —Å–æ–Ω–≥–æ—Ö/–±—É—Ü–∞–∞—Ö
    const toggleDay = (day: string) => {
        const updated = form.schedule.some(s => s.day === day)
            ? form.schedule.filter(s => s.day !== day)
            : [...form.schedule, { day, time: "" }]
        setForm({ ...form, schedule: updated })
    }

    // ‚è∞ –¶–∞–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
    const setTime = (day: string, time: string) => {
        setForm({
            ...form,
            schedule: form.schedule.map(s => s.day === day ? { ...s, time } : s),
        })
    }

    // üì§ –ò–ª–≥—ç—ç—Ö “Ø–π–ª–¥—ç–ª
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault()
        setIsLoading(true)

        const newErrors = {
            subject: form.subject.length ? "" : "‚ùó –ó–∞–∞—Ö —Ö–∏—á—ç—ç–ª—ç—ç –∑–∞–∞–≤–∞–ª —Å–æ–Ω–≥–æ–Ω–æ —É—É",
            grade: form.grade.trim() ? "" : "‚ùó –•–∏—á—ç—ç–ª –∑–∞–∞—Ö –∞–Ω–≥–∏–π–≥ —Å–æ–Ω–≥–æ–Ω–æ —É—É",
        }
        setErrors(newErrors)
        if (newErrors.subject || newErrors.grade) {
            setIsLoading(false)
            return
        }

        try {
            const response = await axios.post(`${BASE_URL}teachingClass`, form, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            console.log("‚úÖ –•–∏—á—ç—ç–ª –Ω—ç–º—ç–≥–¥—Å—ç–Ω:", response.data);
            toast("‚úÖ –•–∏—á—ç—ç–ª –æ—Ä–æ—Ö –∞–Ω–≥–∏ –∞–º–∂–∏–ª—Ç—Ç–∞–π –Ω—ç–º—ç–≥–¥–ª—ç—ç");
        } catch (error: any) {
            console.log("‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);
            toast("‚ùå –•–∏—á—ç—ç–ª –Ω—ç–º—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.");
        } finally {
            setIsLoading(false);
        }
    }

    return (
        <Card className="p-6">
            <form onSubmit={handleSubmit} className="space-y-8">
                <CardContent className="space-y-6">

                    {/* üìò –•–∏—á—ç—ç–ª —Å–æ–Ω–≥–æ—Ö */}
                    <div>
                        <Label className={errors.subject ? "text-red-500" : ""}>–ó–∞–∞—Ö —Ö–∏—á—ç—ç–ª</Label>
                        <Dialog>
                            <DialogTrigger asChild>
                                <Button variant="outline" className={`w-full ${errors.subject && "border-red-500 text-red-500"}`}>
                                    {form.subject.length ? form.subject.join(", ") : "–•–∏—á—ç—ç–ª —Å–æ–Ω–≥–æ—Ö"}
                                </Button>
                            </DialogTrigger>
                            <DialogContent>
                                <DialogTitle>–•–∏—á—ç—ç–ª“Ø“Ø–¥</DialogTitle>
                                <ChooseSubject setSelectedClass={(subjects) => setForm({ ...form, subject: subjects })} />
                            </DialogContent>
                        </Dialog>
                        {errors.subject && <p className="text-sm text-red-500">{errors.subject}</p>}
                    </div>

                    {/* üè´ –•–∏—á—ç—ç–ª –∑–∞–∞—Ö –∞–Ω–≥–∏ */}
                    <div>
                        <Label>–•–∏—á—ç—ç–ª –∑–∞–∞—Ö –∞–Ω–≥–∏</Label>
                        <GradeGroup
                            setField={(field: string, value: string) => setForm({ ...form, [field]: value })}
                            onChange={(val: string) => setForm({ ...form, grade: val })} />
                        {errors.grade && <p className="text-sm text-red-500">{errors.grade}</p>}
                    </div>

                    {/* üìÖ –•–∏—á—ç—ç–ª–∏–π–Ω ”©–¥—Ä“Ø“Ø–¥ –±–∞ —Ü–∞–≥ */}
                    <div className="space-y-3">
                        <Label>–•–∏—á—ç—ç–ª –æ—Ä–æ—Ö ”©–¥—Ä“Ø“Ø–¥ –±–∞ —Ü–∞–≥</Label>
                        <div className="flex flex-wrap gap-2">
                            {days.map(day => (
                                <Button key={day} type="button"
                                    variant={form.schedule.some(s => s.day === day) ? "default" : "outline"}
                                    onClick={() => toggleDay(day)}
                                    className="text-sm px-4 py-2"
                                >{day}</Button>
                            ))}
                        </div>

                        {form.schedule.map(({ day, time }) => (
                            <div key={day} className="flex items-center gap-4 pt-2">
                                <span className="min-w-[70px] font-medium">{day}</span>
                                <Select value={time} onValueChange={(t) => setTime(day, t)}>
                                    <SelectTrigger className="w-[130px] h-10">
                                        <SelectValue placeholder="–¶–∞–≥ —Å–æ–Ω–≥–æ—Ö" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {timeSlots.map(t => (
                                            <SelectItem key={t} value={t}>{t}</SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        ))}
                    </div>

                    {/* üìÜ –£–ª–∏—Ä–∞–ª */}
                    <div>
                        <Label htmlFor="term">–£–ª–∏—Ä–∞–ª / –•–∏—á—ç—ç–ª–∏–π–Ω –∂–∏–ª (–∑–∞–∞–≤–∞–ª –±–∏—à)</Label>
                        <Input
                            id="term"
                            name="term"
                            placeholder="–ñ–∏—à—ç—ç: 2024 –æ–Ω—ã —Ö–∞–≤–∞—Ä"
                            value={form.term}
                            onChange={handleChange}
                            className="h-10"
                        />
                    </div>
                </CardContent>

                <CardFooter className="flex justify-end">
                    <Button type="submit" disabled={isLoading}>
                        {isLoading ? "–•–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞..." : "–ê–Ω–≥–∏ —Ö–∞–¥–≥–∞–ª–∞—Ö"}
                    </Button>
                </CardFooter>
            </form>
        </Card>
    )
}